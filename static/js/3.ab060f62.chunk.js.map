{"version":3,"sources":["components/MessageBlock.tsx","components/CodeControl.tsx","components/data/BoostTypes.ts","components/data/CodeExamples.ts","Models.tsx","components/ManualControl.tsx","components/BoostDeviceInfo.tsx","components/BoostMain.tsx","components/ManualExtraControl.tsx","components/AiControl.tsx","components/Info.tsx","components/MotorControl.tsx","components/BoostConfiguration.tsx","SideBarMenu.tsx","components/BoostControlInfo.tsx","App.tsx"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","semantic_ui_react__WEBPACK_IMPORTED_MODULE_1__","semantic_ui_react__WEBPACK_IMPORTED_MODULE_2__","MessageBlock","_ref","visible","header","content","infoToggle","info","onDismiss","color","className","name","onClick","EDITOR_DEFAULT_HEIGHT","EDITOR_DEFAULT_ICON","INFO_TEXT","TEMPLATE","MONACO_OPTIONS","selectOnLineNumbers","language","theme","formatOnPaste","automaticLayout","CodeControl","props","_this","Object","_home_runner_work_lego_boost_app_lego_boost_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","_home_runner_work_lego_boost_app_lego_boost_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_home_runner_work_lego_boost_app_lego_boost_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","shouldComponentUpdate","nextProps","nextState","code","infoVisible","state","codeToRun","componentWillUnmount","updateCode","handleItemClick","e","setState","executionError","functionToExecute","concat","eval","updateMonacoCode","newValue","ev","substr","indexOf","length","handleAccordionClick","titleProps","index","newIndex","activeIndex","editorWillMount","monaco","languages","onLanguage","typescript","typescriptDefaults","addExtraLib","legoBoostTypes","editorDidMount","editor","focus","onDidChangeCursorSelection","readOnly","selection","startLineNumber","updateOptions","onKeyDown","keyCode","monacoEditor","Enter","getAction","run","copyCode","id","CODE_EXAMPLES","toggleEditorSize","editorHeight","editorIcon","editorWidth","window","boost","onunhandledrejection","reason","message","_this2","react__WEBPACK_IMPORTED_MODULE_5__","semantic_ui_react__WEBPACK_IMPORTED_MODULE_7__","style","paddingBottom","_MessageBlock__WEBPACK_IMPORTED_MODULE_17__","textAlign","react_monaco_editor__WEBPACK_IMPORTED_MODULE_6___default","a","value","replace","options","width","height","onChange","semantic_ui_react__WEBPACK_IMPORTED_MODULE_8__","semantic_ui_react__WEBPACK_IMPORTED_MODULE_9__","centered","columns","Row","semantic_ui_react__WEBPACK_IMPORTED_MODULE_10__","semantic_ui_react__WEBPACK_IMPORTED_MODULE_11__","negative","semantic_ui_react__WEBPACK_IMPORTED_MODULE_12__","semantic_ui_react__WEBPACK_IMPORTED_MODULE_13__","Title","active","semantic_ui_react__WEBPACK_IMPORTED_MODULE_14__","as","Content","fluid","map","example","key","description","semantic_ui_react__WEBPACK_IMPORTED_MODULE_15__","minWidth","maxWidth","circular","size","icon","bind","margin","href","React","d","__webpack_exports__","ControlMode","Command","BoostDeviceInfo","classCallCheck","possibleConstructorReturn","getPrototypeOf","stateUpdaterId","stateUpdateInterval","componentDidMount","setInterval","connected","deviceInfo","connectedChanged","distance","error","rssi","tilt","ports","A","action","angle","B","AB","C","D","LED","showInfo","location","pathname","roll","pitch","clearInterval","react","Accordion","padding","boostInfosVisible","toggleVisibility","Header","Icon","Grid","Column","Number","MAX_SAFE_INTEGER","keys","element","BoostMain","isIos","test","navigator","userAgent","isWebBluetoothSupported","bluetooth","Container","Message","Button","connect","configuration","ManualControl","controlClick","asyncToGenerator","regenerator_default","mark","_callee","command","wrap","_context","prev","next","lastCommand","toString","handleCommand","stop","_x","apply","arguments","controlRelease","_ref2","_callee2","_context2","mode","Arcade","_x2","_ref3","_callee3","_context3","t0","Stop","Left","Right","Up","Down","abrupt","turn","Click","driveToDirection","_x3","controlMode","createControl","objectSpread","onMouseDown","onMouseUp","onTouchStart","onTouchEnd","celled","padded","states","AiControl","Group","positive","ai","Or","text","currentState","controlData","Info","version","date","List","bulleted","Item","Divider","MotorControl","stopMotors","_i","_arr","port","motorAngle","createColumn","Segment","build","inverted","settings","start","min","max","step","defineProperty","BoostConfiguration","stateOptions","setCarMode","updataConfig","leftMotor","rightMotor","setVernieMode","setDriveFineTune","original","driveFinetune","setTurnFineTune","turnFinetune","setMotor","_this$props$updataCon","other","otherValue","secondary","Dropdown","search","resetConfig","SideBarMenu","handleShowClick","prevState","handleSidebarHide","getConnectedItem","_","Sidebar","Pushable","Menu","animation","onHide","vertical","Link","to","fixed","position","Pusher","children","BoostControlInfo","input","speed","turnAngle","updateInputMode","Table","definition","Body","Cell","LED_COLORS","ManualExtraControl","handleLedChange","ledColor","extraControlsVisible","controlProps","onUpdateControlMode","primary","ledAsync","sent","components_BoostControlInfo","CONFIG_STORAGE_KEY","LOCAL_STATE_STORAGE_KEY","DEFAULT_BOOST_CONFIG","DEFAULT_STATE","infosVisible","App","LegoBoost","isBoolean","onInfoToggle","updateToStorageAndState","onBoostInfoToggle","onExtraControlsToggle","propName","newLocalState","localStorage","set","updateConfig","c","prevConfig","newConfig","distanceModifier","DEFAULT_CONFIG","METRIC_MODIFIER","turnModifier","TURN_MODIFIER","updateConfiguration","updateIsConnected","isConnected","savedState","get","logDebug","console","log","boostProps","react_router_dom","src_SideBarMenu","react_router","exact","path","render","components_BoostMain","assign","components_ManualControl","components_ManualExtraControl","components_MotorControl","components_AiControl","components_BoostConfiguration","components_Info","process","components_BoostDeviceInfo"],"mappings":"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","file":"static/js/3.ab060f62.chunk.js","sourcesContent":["import * as React from 'react';\nimport { Message, Icon } from 'semantic-ui-react';\n\ninterface MessageContentProps {\n  visible: boolean;\n  header?: string;\n  content: string;\n  infoToggle: () => void;\n}\n\nconst MessageBlock = ({ visible, header, content, infoToggle }: MessageContentProps) => {\n  return visible ? (\n    <Message info onDismiss={infoToggle} header={header} content={content} />\n  ) : (\n    <Icon color=\"blue\" className=\"dismissed-info\" name=\"info circle\" onClick={infoToggle} />\n  );\n};\n\nexport default MessageBlock;\n","import LegoBoost from 'lego-boost-browser';\nimport * as React from 'react';\nimport MonacoEditor from 'react-monaco-editor';\nimport {\n  Grid,\n  TextArea,\n  Button,\n  Header,\n  Container,\n  Accordion,\n  Icon,\n  Divider,\n  Message,\n  SemanticICONS,\n} from 'semantic-ui-react';\nimport * as monacoEditor from 'monaco-editor/esm/vs/editor/editor.api';\n\nimport MessageBlock from './MessageBlock';\nimport { legoBoostTypes } from './data/BoostTypes';\nimport { CODE_EXAMPLES } from './data/CodeExamples';\n\ninterface CodeControlProps {\n  boost: LegoBoost;\n  infoVisible: boolean;\n  infoToggle: () => void;\n  code: string;\n  updateCode: (code: string) => void;\n}\n\ninterface CodeControlState {\n  codeToRun: string;\n  activeIndex: number;\n  executionError: string;\n  editorWidth: string;\n  editorHeight: string;\n  editorIcon: SemanticICONS;\n}\n\nconst EDITOR_DEFAULT_HEIGHT = '500';\nconst EDITOR_DEFAULT_ICON = 'arrow circle down';\n\nconst INFO_TEXT = `Insert the code inside the async function (starting from line 6). Press the Execute button to run the code.`;\n\nconst TEMPLATE = `import LegoBoost from 'lego-boost-browser';\n\nconst boost = new LegoBoost();\n\nasync () => {\n%CODE%\n}`;\n\nconst MONACO_OPTIONS: monacoEditor.editor.IEditorConstructionOptions = {\n  selectOnLineNumbers: true,\n  language: 'typescript',\n  theme: 'vs-dark',\n  formatOnPaste: true,\n  automaticLayout: true,\n};\n\nclass CodeControl extends React.Component<CodeControlProps, CodeControlState> {\n  constructor(props: CodeControlProps) {\n    super(props);\n    this.state = {\n      codeToRun: this.props.code || CODE_EXAMPLES[0].code,\n      executionError: '',\n      activeIndex: 0,\n      editorWidth: '100%',\n      editorHeight: EDITOR_DEFAULT_HEIGHT,\n      editorIcon: EDITOR_DEFAULT_ICON,\n    };\n\n    // Need to set this at the constructor as can't set before eval and remove after that as using async function, it is not known when eval is ready\n    (window as any).boost = this.props.boost;\n\n    // Execute will throw Unhandled Rejection (ReferenceError)\n    window.onunhandledrejection = e => {\n      this.setState({ executionError: e.reason.message || 'Unknown error' });\n    };\n  }\n\n  shouldComponentUpdate = (nextProps: CodeControlProps, nextState: CodeControlState) => {\n    return (\n      this.props.code !== nextProps.code ||\n      this.props.infoVisible !== nextProps.infoVisible ||\n      this.state.codeToRun !== nextState.codeToRun\n    );\n  };\n\n  componentWillUnmount = () => {\n    if (this.props.code !== this.state.codeToRun) {\n      this.props.updateCode(this.state.codeToRun);\n    }\n  };\n\n  handleItemClick = (e, { name }) => {\n    this.setState({ executionError: '' });\n    // eval evaluates a string as a JavaScript expression within the current execution scope and can access local variables\n    // Typescript eval doesn't create closures on their creation context. They are always created on global scope. Maybe like new Function()?\n    // Wrap executble code to a function\n    const functionToExecute = `(async () => {${this.state.codeToRun}})()`;\n    eval(functionToExecute);\n    // new Function(`return async function() {${this.state.codeToRun}}`)()();\n  };\n\n  updateMonacoCode = (newValue: string, ev: monacoEditor.editor.IModelContentChangedEvent) => {\n    let codeToRun = newValue.substr(newValue.indexOf('async () => {') + 14);\n    codeToRun = codeToRun.substr(0, codeToRun.length - 2);\n    this.setState({ codeToRun });\n    this.props.updateCode(codeToRun);\n  };\n\n  handleAccordionClick = (e, titleProps) => {\n    const { index } = titleProps;\n    const { activeIndex } = this.state;\n    const newIndex = activeIndex === index ? -1 : index;\n\n    this.setState({ activeIndex: newIndex });\n  };\n\n  editorWillMount = (monaco: typeof monacoEditor) => {\n    monaco.languages.onLanguage('typescript', () => {\n      monaco.languages.typescript.typescriptDefaults.addExtraLib(legoBoostTypes, 'lego-boost-browser.d.ts');\n    });\n  };\n\n  editorDidMount = (editor: monacoEditor.editor.IStandaloneCodeEditor, monaco) => {\n    editor.focus();\n    editor.onDidChangeCursorSelection(e => {\n      const readOnly = e.selection.startLineNumber <= 5;\n      editor.updateOptions({ readOnly });\n    });\n    editor.onKeyDown(e => {\n      if (e.keyCode === monacoEditor.KeyCode.Enter) {\n        editor.updateOptions({ readOnly: false });\n      }\n    });\n    editor.getAction('editor.action.formatDocument').run();\n  };\n\n  copyCode = id => this.setState({ codeToRun: CODE_EXAMPLES[id].code });\n\n  toggleEditorSize = () => {\n    const editorHeight = this.state.editorHeight === EDITOR_DEFAULT_HEIGHT ? '85vh' : EDITOR_DEFAULT_HEIGHT;\n    const editorIcon = this.state.editorIcon === EDITOR_DEFAULT_ICON ? 'arrow circle up' : EDITOR_DEFAULT_ICON;\n    this.setState({ editorHeight, editorIcon });\n  };\n\n  render() {\n    return (\n      <Container>\n        <Container style={{ paddingBottom: '20px' }}>\n          <MessageBlock visible={this.props.infoVisible} infoToggle={this.props.infoToggle} content={INFO_TEXT} />\n        </Container>\n\n        <Container textAlign=\"left\">\n          <MonacoEditor\n            language=\"typescript\"\n            value={TEMPLATE.replace('%CODE%', this.state.codeToRun)}\n            options={MONACO_OPTIONS}\n            width={this.state.editorWidth}\n            height={this.state.editorHeight}\n            onChange={this.updateMonacoCode}\n            editorWillMount={this.editorWillMount}\n            editorDidMount={this.editorDidMount}\n          />\n          <Icon color=\"blue\" className=\"dismissed-info\" name={this.state.editorIcon} onClick={this.toggleEditorSize} />\n        </Container>\n\n        <br />\n\n        <Grid centered columns=\"equal\">\n          <Grid.Row>\n            <Button color=\"green\" name=\"execute\" onClick={this.handleItemClick}>\n              <Icon name=\"code\" />\n              Execute\n            </Button>\n          </Grid.Row>\n          <Grid.Row>\n            {this.state.executionError !== '' ? <Message negative>{this.state.executionError}</Message> : null}\n          </Grid.Row>\n        </Grid>\n\n        <Divider />\n\n        <Container>\n          <Accordion>\n            <Accordion.Title active={this.state.activeIndex === 0} index={0} onClick={this.handleAccordionClick}>\n              <Header as=\"h3\">\n                <Icon name=\"dropdown\" />\n                Example code\n              </Header>\n            </Accordion.Title>\n            <Accordion.Content active={this.state.activeIndex === 0}>\n              <Header as=\"h5\">Click copy button to copy the code to the code editor and press execute</Header>\n\n              <Container textAlign=\"center\" fluid>\n                {CODE_EXAMPLES.map((example, index) => (\n                  <Container key={example.header}>\n                    <Header as=\"h4\">{example.header}</Header>\n                    <Container>{example.description}</Container>\n                    <TextArea value={example.code} readOnly style={{ minWidth: 400, maxWidth: 500 }} />\n                    <Button\n                      circular\n                      className=\"code-copy\"\n                      color=\"blue\"\n                      size=\"mini\"\n                      icon=\"paste\"\n                      onClick={this.copyCode.bind(this, index)}\n                    />\n                    <Divider />\n                  </Container>\n                ))}\n              </Container>\n\n              <pre style={{ textAlign: 'left', maxWidth: 350, margin: '0 auto' }}>\n                <h4>Supported functions</h4>\n                Check documentation from:\n                <br />\n                <a href=\"https://github.com/ttu/node-movehub-async#hub\">node-movehub-async</a>\n                <br />\n                <a href=\"https://github.com/hobbyquaker/node-movehub#hub\">node-movehub</a>\n                <br />\n                <br />\n                boost is the class with Lego Boost control functionality.\n                <br />\n                <br />\n                boost.drive(distance)\n                <br />\n                boost.turn(degrees)\n                <br />\n                boost.motorTimeAsync(motorPort, seconds, dutyCycle)\n                <br />\n                boost.motorTimeMultiAsync(seconds, powerA, powerB)\n                <br />\n                boost.motorAngleAsync(motorPort, angle, power)\n                <br />\n                boost.motorAngleMultiAsync(angle, powerA, powerB)\n                <br />\n                boost.ledAsync(color)\n                <br />\n                boost.changeLed()\n                <br />\n                boost.deviceInfo.distance\n                <br />\n                <br />\n                await in the front of the function means, that the execution will wait that the sent command is finished\n                <br />\n              </pre>\n            </Accordion.Content>\n          </Accordion>\n        </Container>\n      </Container>\n    );\n  }\n}\n\nexport default CodeControl;\n","const legoBoostTypes = `\ndeclare module 'lego-boost-browser' {\n    export declare type State = 'Turn' | 'Drive' | 'Stop' | 'Back' | 'Manual' | 'Seek';\n    export declare type Motor = 'A' | 'B';\n    export declare type TurnDirection = 'left' | 'right';\n    /** Information from Lego Boost motors and sensors */\n    export declare type DeviceInfo = {\n        ports: {\n            A: {\n                action: string;\n                angle: number;\n            };\n            B: {\n                action: string;\n                angle: number;\n            };\n            AB: {\n                action: string;\n                angle: number;\n            };\n            C: {\n                action: string;\n                angle: number;\n            };\n            D: {\n                action: string;\n                angle: number;\n            };\n            LED: {\n                action: string;\n                angle: number;\n            };\n        };\n        tilt: {\n            roll: number;\n            pitch: number;\n        };\n        distance: number;\n        rssi: number;\n        color: string;\n        error: string;\n        connected: boolean;\n        err?: any;\n    };\n    /** Input data to used on manual and AI control */\n    export declare type ControlData = {\n        input: string;\n        speed: number;\n        turnAngle: number;\n        turnDirection?: TurnDirection;\n        tilt: {\n            roll: number;\n            pitch: number;\n        };\n        /** Force state change manually */\n        forceState: State;\n        /** Manually toggle input mode */\n        updateInputMode: (controlData: ControlData) => void;\n        /** Time stamp when control data was updated */\n        controlUpdateTime?: number;\n        state?: State;\n        motorA?: number;\n        motorB?: number;\n    };\n    export declare type RawData = {\n        0: number;\n        1: number;\n        2: number;\n        3: number;\n        4: number;\n        5: number;\n        6: number;\n        7: number;\n        8: number;\n        9?: number;\n        10?: number;\n        11?: number;\n        12?: number;\n        13?: number;\n        14?: number;\n    };\n\n    export default class LegoBoost {\n        private hub;\n        private hubControl;\n        private color;\n        private updateTimer;\n        private configuration;\n        private logDebug;\n        /**\n         * Information from Lego Boost motors and sensors\n         * @property LegoBoost#deviceInfo\n         */\n        deviceInfo: DeviceInfo;\n        /**\n         * Input data to used on manual and AI control\n         * @property LegoBoost#controlData\n         */\n        controlData: ControlData;\n        /**\n         * Drive forward until wall is reaced or drive backwards 100meters\n         * @method LegoBoost#connect\n         * @param {BoostConfiguration} [configuration={}] Lego boost motor and control configuration\n         * @returns {Promise}\n         */\n        connect(configuration?: BoostConfiguration): Promise<void>;\n        private initHub;\n        private handleGattDisconnect;\n        /**\n         * Change the color of the led between pink and orange\n         * @method LegoBoost#changeLed\n         * @returns {Promise}\n         */\n        changeLed(): Promise<void>;\n        /**\n         * Drive forward until wall is reaced or drive backwards 100meters\n         * @method LegoBoost#driveToDirection\n         * @param {number} [direction=1] Direction to drive. 1 or positive is forward, 0 or negative is backwards.\n         * @returns {Promise}\n         */\n        driveToDirection(direction?: number): Promise<{}>;\n        /**\n         * Disconnect Lego Boost\n         * @method LegoBoost#disconnect\n         * @returns {boolean|undefined}\n         */\n        disconnect(): boolean | undefined;\n        /**\n         * Start AI mode\n         * @method LegoBoost#ai\n         */\n        ai(): void;\n        /**\n         * Stop engines A and B\n         * @method LegoBoost#stop\n         * @returns {Promise}\n         */\n        stop(): Promise<{}>;\n        /**\n         * Update Boost motor and control configuration\n         * @method LegoBoost#updateConfiguration\n         * @param {BoostConfiguration} configuration Boost motor and control configuration\n         */\n        updateConfiguration(configuration: BoostConfiguration): void;\n        /**\n         * Control the LED on the Move Hub\n         * @method LegoBoost#led\n         * @param {boolean|number|string} color\n         * If set to boolean 'false' the LED is switched off, if set to 'true' the LED will be white.\n         * Possible string values: 'off', 'pink', 'purple', 'blue', 'lightblue', 'cyan', 'green', 'yellow', 'orange', 'red',\n         * 'white'\n         */\n        led(color: boolean | number | string): void;\n        /**\n         * Control the LED on the Move Hub\n         * @method LegoBoost#ledAsync\n         * @param {boolean|number|string} color\n         * If set to boolean 'false' the LED is switched off, if set to 'true' the LED will be white.\n         * Possible string values: 'off', 'pink', 'purple', 'blue', 'lightblue', 'cyan', 'green', 'yellow', 'orange', 'red',\n         * 'white'\n         * @returns {Promise}\n         */\n        ledAsync(color: boolean | number | string): Promise<{}>;\n        /**\n         * Run a motor for specific time\n         * @param {string|number} port possible string values: 'A', 'B', 'AB', 'C', 'D'.\n         * @param {number} seconds\n         * @param {number} [dutyCycle=100] motor power percentage from '-100' to '100'. If a negative value is given rotation\n         * is counterclockwise.\n         */\n        motorTime(port: string | number, seconds: number, dutyCycle?: number): void;\n        /**\n         * Run a motor for specific time\n         * @method LegoBoost#motorTimeAsync\n         * @param {string|number} port possible string values: 'A', 'B', 'AB', 'C', 'D'.\n         * @param {number} seconds\n         * @param {number} [dutyCycle=100] motor power percentage from '-100' to '100'. If a negative value is given rotation\n         * is counterclockwise.\n         * @param {boolean} [wait=false] will promise wait unitll motorTime run time has elapsed\n         * @returns {Promise}\n         */\n        motorTimeAsync(port: string | number, seconds: number, dutyCycle?: number, wait?: boolean): Promise<void>;\n        /**\n         * Run both motors (A and B) for specific time\n         * @param {number} seconds\n         * @param {number} dutyCycleA motor power percentage from '-100' to '100'. If a negative value is given rotation\n         * is counterclockwise.\n         * @param {number} dutyCycleB motor power percentage from '-100' to '100'. If a negative value is given rotation\n         * is counterclockwise.\n         * @param {function} callback\n         */\n        motorTimeMulti(seconds: number, dutyCycleA?: number, dutyCycleB?: number): void;\n        /**\n         * Run both motors (A and B) for specific time\n         * @method LegoBoost#motorTimeMultiAsync\n         * @param {number} seconds\n         * @param {number} [dutyCycleA=100] motor power percentage from '-100' to '100'. If a negative value is given rotation\n         * is counterclockwise.\n         * @param {number} [dutyCycleB=100] motor power percentage from '-100' to '100'. If a negative value is given rotation\n         * is counterclockwise.\n         * @param {boolean} [wait=false] will promise wait unitll motorTime run time has elapsed\n         * @returns {Promise}\n         */\n        motorTimeMultiAsync(seconds: number, dutyCycleA?: number, dutyCycleB?: number, wait?: boolean): Promise<void>;\n        /**\n         * Turn a motor by specific angle\n         * @param {string|number} port possible string values: 'A', 'B', 'AB', 'C', 'D'.\n         * @param {number} angle - degrees to turn from '0' to '2147483647'\n         * @param {number} [dutyCycle=100] motor power percentage from '-100' to '100'. If a negative value is given\n         * rotation is counterclockwise.\n         */\n        motorAngle(port: string | number, angle: number, dutyCycle?: number): void;\n        /**\n         * Turn a motor by specific angle\n         * @method LegoBoost#motorAngleAsync\n         * @param {string|number} port possible string values: 'A', 'B', 'AB', 'C', 'D'.\n         * @param {number} angle - degrees to turn from '0' to '2147483647'\n         * @param {number} [dutyCycle=100] motor power percentage from '-100' to '100'. If a negative value is given\n         * rotation is counterclockwise.\n         * @param {boolean} [wait=false] will promise wait unitll motorAngle has turned\n         * @returns {Promise}\n         */\n        motorAngleAsync(port: string | number, angle: number, dutyCycle?: number, wait?: boolean): Promise<void>;\n        /**\n         * Turn both motors (A and B) by specific angle\n         * @method LegoBoost#motorAngleMulti\n         * @param {number} angle degrees to turn from '0' to '2147483647'\n         * @param {number} dutyCycleA motor power percentage from '-100' to '100'. If a negative value is given\n         * rotation is counterclockwise.\n         * @param {number} dutyCycleB motor power percentage from '-100' to '100'. If a negative value is given\n         * rotation is counterclockwise.\n         */\n        motorAngleMulti(angle: number, dutyCycleA?: number, dutyCycleB?: number): void;\n        /**\n         * Turn both motors (A and B) by specific angle\n         * @method LegoBoost#motorAngleMultiAsync\n         * @param {number} angle degrees to turn from '0' to '2147483647'\n         * @param {number} [dutyCycleA=100] motor power percentage from '-100' to '100'. If a negative value is given\n         * rotation is counterclockwise.\n         * @param {number} [dutyCycleB=100] motor power percentage from '-100' to '100'. If a negative value is given\n         * rotation is counterclockwise.\n         * @param {boolean} [wait=false] will promise wait unitll motorAngle has turned\n         * @returns {Promise}\n         */\n        motorAngleMultiAsync(angle: number, dutyCycleA?: number, dutyCycleB?: number, wait?: boolean): Promise<void>;\n        /**\n         * Drive specified distance\n         * @method LegoBoost#drive\n         * @param {number} distance distance in centimeters (default) or inches. Positive is forward and negative is backward.\n         * @param {boolean} [wait=true] will promise wait untill the drive has completed.\n         * @returns {Promise}\n         */\n        drive(distance: number, wait?: boolean): Promise<{}>;\n        /**\n         * Turn robot specified degrees\n         * @method LegoBoost#turn\n         * @param {number} degrees degrees to turn. Negative is to the left and positive to the right.\n         * @param {boolean} [wait=true] will promise wait untill the turn has completed.\n         * @returns {Promise}\n         */\n        turn(degrees: number, wait?: boolean): Promise<{}>;\n        /**\n         * Drive untill sensor shows object in defined distance\n         * @method LegoBoost#driveUntil\n         * @param {number} [distance=0] distance in centimeters (default) or inches when to stop. Distance sensor is not very sensitive or accurate.\n         * By default will stop when sensor notices wall for the first time. Sensor distance values are usualy between 110-50.\n         * @param {boolean} [wait=true] will promise wait untill the bot will stop.\n         * @returns {Promise}\n         */\n        driveUntil(distance?: number, wait?: boolean): Promise<any>;\n        /**\n         * Turn until there is no object in sensors sight\n         * @method LegoBoost#turnUntil\n         * @param {number} [direction=1] direction to turn to. 1 (or any positive) is to the right and 0 (or any negative) is to the left.\n         * @param {boolean} [wait=true] will promise wait untill the bot will stop.\n         * @returns {Promise}\n         */\n        turnUntil(direction?: number, wait?: boolean): Promise<any>;\n        /**\n         * Send raw data\n         * @param {object} raw raw data\n         */\n        rawCommand(raw: RawData): void;\n        private preCheck;\n    }\n}\n`;\n\nexport { legoBoostTypes };","const CODE_EXAMPLES = [\n  {\n    header: 'Change the color of the led',\n    description: 'Change the color from red to green. Supported colors: off, pink, purple, blue, lightblue, cyan, green, yellow, orange, red, white',\n    code: `await boost.ledAsync('red');\nawait boost.ledAsync('yellow');\nawait boost.ledAsync('green');`\n  },\n  {\n    header: 'Drive and back',\n    description: 'Drive 40cm, turn 180 degrees and drive 40cm',\n    code: `await boost.drive(40);\nawait boost.turn(180);\nawait boost.drive(40);`\n  },\n  {\n    header: 'Drive for 500 motor degrees',\n    description: 'Turn motors A and B for 20% power for 500 degrees',\n    code: `await boost.motorAngleMultiAsync(500, 20, 20);`\n  },\n  {\n    header: 'Drive a circle',\n    description: 'Drive a circle for 60 seconds',\n    code: `await boost.motorTimeMultiAsync(60, 50, 10);`\n  },\n  {\n    header: 'Driva a snake',\n    description: 'Repeat motor command for 5 times. Every other time motor A power is 30 and B is 10. Every other power for A is 10 and B is 30.',\n    code: `for(let i = 0; i < 6; i++){\n  if (i % 2 == 0)\n    await boost.motorAngleMultiAsync(500, 30, 10);\n  else\n    await boost.motorAngleMultiAsync(500, 10, 30);\n}`\n  },\n  {\n    header: `Turn Vernie's head`,\n    description: `Turn Vernie's head first to the left, wait 1 second, turn to the right, wait 1 second, then back to the center.`,\n    code: `await boost.motorAngleAsync('D', 50, 10);\nawait new Promise(resolve => setTimeout(resolve, 1000));\nawait boost.motorAngleAsync('D', 100, -10);\nawait new Promise(resolve => setTimeout(resolve, 1000));\nawait boost.motorAngleAsync('D', 50, 10);`\n  },\n  {\n    header: 'Drive a square route',\n    description: 'Drive 50cm, turn 90 degree. Repeat this 4 times. Should complete a square',\n    code: `const distanceToDrive = 50;\nconst degreestoTurn = 90;\n\nawait boost.drive(distanceToDrive);\nawait boost.turn(degreestoTurn);\nawait boost.drive(distanceToDrive);\nawait boost.turn(degreestoTurn);\nawait boost.drive(distanceToDrive);\nawait boost.turn(degreestoTurn);\nawait boost.drive(distanceToDrive);`\n  },\n  {\n    header: 'Drive until reach an object',\n    description: 'If distance sendor reading is over 100, drive for 10 angles. Repeat',\n    code: `while (true) {\n  if (boost.deviceInfo.distance > 100) {\n    await boost.motorAngleMultiAsync(10, 100, 100);\n  } else {\n    break;\n  }\n}`\n  }\n];\n\nexport { CODE_EXAMPLES };\n","import { BoostConfiguration } from 'lego-boost-browser/dist/hub/hubAsync';\nimport { State } from 'lego-boost-browser/dist/types';\n\n// TODO: Use ControlData and DeviceInfo from lego-boost-browser\n\nexport interface ControlData {\n  speed: number;\n  turnAngle: number;\n  input: any;\n  state?: State;\n  updateInputMode: any;\n}\n\nexport interface DeviceInfo {\n  connected: boolean;\n  distance: number;\n  color: string;\n  error: string;\n  rssi: number;\n  tilt: { roll: number; pitch: number };\n  ports: {\n    A: { action: string; angle: number };\n    B: { action: string; angle: number };\n    AB: { action: string; angle: number };\n    C: { action: string; angle: number };\n    D: { action: string; angle: number };\n    LED: { action: string; angle: number };\n  };\n}\n\nexport interface BoostConfig extends BoostConfiguration {\n  driveFinetune?: number;\n  turnFinetune?: number;\n}\n\nexport enum ControlMode {\n  Click,\n  Arcade,\n}\n\nexport interface StoredApplicationState {\n  infosVisible: boolean;\n  boostInfosVisible: boolean;\n  extraControlsVisible: boolean;\n  code: string;\n  controlMode: ControlMode;\n}","import LegoBoost from 'lego-boost-browser';\nimport * as React from 'react';\nimport { Grid } from 'semantic-ui-react';\n\nimport { ControlMode } from '../Models';\n\ninterface ManualControlProps {\n  boost: LegoBoost;\n  controlMode: ControlMode;\n}\n\ninterface ManualControlState {\n  lastCommand: string;\n  mode: ControlMode;\n}\n\nenum Command {\n  None = 'none',\n  Up = 'up',\n  Down = 'down',\n  Left = 'left',\n  Right = 'right',\n  Stop = 'stop',\n}\n\nclass ManualControl extends React.Component<ManualControlProps, ManualControlState> {\n  constructor(props: ManualControlProps) {\n    super(props);\n    this.state = {\n      lastCommand: '',\n      mode: props.controlMode || ControlMode.Click,\n    };\n  }\n\n  controlClick = async (command: Command) => {\n    this.setState({ lastCommand: command.toString() });\n    await this.handleCommand(command);\n  };\n\n  controlRelease = async (command: Command) => {\n    if (this.state.mode === ControlMode.Arcade) {\n      await this.props.boost.stop();\n      this.setState({ lastCommand: `stop ${command}` });\n    }\n  };\n\n  handleCommand = async (command: Command) => {\n    switch (command) {\n      case Command.Stop:\n        await this.props.boost.stop();\n        break;\n      case Command.Left:\n        await this.props.boost.turn(-90 * (this.state.mode === ControlMode.Click ? 1 : 400));\n        break;\n      case Command.Right:\n        await this.props.boost.turn(90 * (this.state.mode === ControlMode.Click ? 1 : 400));\n        break;\n      case Command.Up:\n        await this.props.boost.driveToDirection();\n        break;\n      case Command.Down:\n        await this.props.boost.driveToDirection(0);\n        break;\n    }\n  };\n\n  render() {\n    const controlProps = { ...this.props };\n\n    const createControl = (command: Command) => {\n      return (\n        <Grid.Column\n          className={command + '-control'}\n          onMouseDown={() => this.controlClick(command)}\n          onMouseUp={() => this.controlRelease(command)}\n          onTouchStart={() => this.controlClick(command)}\n          onTouchEnd={() => this.controlRelease(command)}\n        />\n      );\n    };\n\n    return (\n      <div className=\"manual-controls\">\n        <Grid columns={3} celled padded style={{ height: '81vh' }}>\n          <Grid.Row style={{ height: '33%' }}>\n            <Grid.Column />\n            {createControl(Command.Up)}\n            <Grid.Column />\n          </Grid.Row>\n          <Grid.Row style={{ height: '33%' }}>\n            {createControl(Command.Left)}\n            {createControl(Command.Stop)}\n            {createControl(Command.Right)}\n          </Grid.Row>\n          <Grid.Row style={{ height: '33%' }}>\n            <Grid.Column />\n            {createControl(Command.Down)}\n            <Grid.Column />\n          </Grid.Row>\n        </Grid>\n      </div>\n    );\n  }\n}\n\nexport default ManualControl;\n","import * as React from 'react';\nimport { Accordion, Icon, Header, Grid } from 'semantic-ui-react';\nimport { DeviceInfo } from '../Models';\nimport LegoBoost from 'lego-boost-browser';\n\ninterface BoostDeviceInfoProps {\n  boost: LegoBoost;\n  connectedChanged: (isConnected: boolean) => void;\n  boostInfosVisible: boolean;\n  toggleVisibility: () => void;\n}\n\nclass BoostDeviceInfo extends React.Component<BoostDeviceInfoProps, DeviceInfo> {\n  boost: LegoBoost;\n  stateUpdaterId: NodeJS.Timeout;\n  stateUpdateInterval = 200;\n\n  constructor(props) {\n    super(props);\n    this.boost = this.props.boost;\n    this.state = {\n      color: '',\n      connected: false,\n      distance: 0,\n      error: '',\n      rssi: 0,\n      ports: {\n        A: { action: '', angle: 0 },\n        B: { action: '', angle: 0 },\n        AB: { action: '', angle: 0 },\n        C: { action: '', angle: 0 },\n        D: { action: '', angle: 0 },\n        LED: { action: '', angle: 0 },\n      },\n      tilt: { roll: 0, pitch: 0 },\n    };\n  }\n\n  componentDidMount = () => {\n    this.stateUpdaterId = setInterval(() => {\n      if (this.state.connected !== this.boost.deviceInfo.connected) {\n        this.props.connectedChanged(this.boost.deviceInfo.connected);\n      }\n\n      this.setState({\n        color: this.boost.deviceInfo.color,\n        connected: this.boost.deviceInfo.connected,\n        distance: this.boost.deviceInfo.distance,\n        error: this.boost.deviceInfo.error,\n        rssi: this.boost.deviceInfo.rssi,\n        tilt: this.boost.deviceInfo.tilt,\n        ports: {\n          A: {\n            action: this.boost.deviceInfo.ports.A.action,\n            angle: this.boost.deviceInfo.ports.A.angle,\n          },\n          B: {\n            action: this.boost.deviceInfo.ports.B.action,\n            angle: this.boost.deviceInfo.ports.B.angle,\n          },\n          AB: {\n            action: this.boost.deviceInfo.ports.AB.action,\n            angle: this.boost.deviceInfo.ports.AB.angle,\n          },\n          C: {\n            action: this.boost.deviceInfo.ports.C.action,\n            angle: this.boost.deviceInfo.ports.C.angle,\n          },\n          D: {\n            action: this.boost.deviceInfo.ports.D.action,\n            angle: this.boost.deviceInfo.ports.D.angle,\n          },\n          LED: {\n            action: this.boost.deviceInfo.ports.LED.action,\n            angle: this.boost.deviceInfo.ports.LED.angle,\n          },\n        },\n      });\n    }, this.stateUpdateInterval);\n  };\n\n  componentWillUnmount() {\n    clearInterval(this.stateUpdaterId);\n  }\n\n  showInfo = () => {\n    // TODO: Get from props\n    return window.location.pathname !== '/manual';\n  }\n\n  render() {\n    if (!this.showInfo()) {\n      return null;\n    }\n\n    return (\n      <Accordion fluid style={{ padding: '20px' }}>\n        <Accordion.Title active={this.props.boostInfosVisible} index={0} onClick={this.props.toggleVisibility}>\n          <Header as=\"h3\">\n            <Icon name=\"dropdown\" />\n            Boost information\n          </Header>\n        </Accordion.Title>\n        <Accordion.Content active={this.props.boostInfosVisible}>\n          <Grid centered className=\"info-items\">\n            <Grid.Row>\n              <Grid.Column className=\"info-item\">\n                <div className=\"info-item-header\">\n                  <Icon name=\"bluetooth b\" />\n                  <label>BLE</label>\n                </div>\n                <div>Status</div>\n                <div>\n                  {this.state.connected ? <Icon name=\"circle\" color=\"green\" /> : <Icon name=\"circle\" color=\"red\" />}\n                </div>\n              </Grid.Column>\n              {/* <Grid.Column className=\"info-item\">\n                <div className=\"info-item-header\">\n                  <Icon name=\"bluetooth b\" />\n                  <label>BLE</label>\n                </div>\n                <div>RSSI</div>\n                <div>{this.state.rssi === 0 ? <Icon name=\"close\" /> : this.state.rssi}</div>\n              </Grid.Column> */}\n              <Grid.Column className=\"info-item\">\n                <div className=\"info-item-header\">\n                  <Icon name=\"camera\" />\n                  Sensor\n                </div>\n                <div>Color</div>\n                <div>{this.state.distance === Number.MAX_SAFE_INTEGER ? <Icon name=\"close\" /> : this.state.color}</div>\n              </Grid.Column>\n              <Grid.Column className=\"info-item\">\n                <div className=\"info-item-header\">\n                  <Icon name=\"camera\" />\n                  Sensor\n                </div>\n                <div>Distance</div>\n                <div>\n                  {this.state.distance === Number.MAX_SAFE_INTEGER ? <Icon name=\"close\" /> : this.state.distance}\n                </div>\n              </Grid.Column>\n              <Grid.Column className=\"info-item\">\n                <div className=\"info-item-header\">\n                  <Icon name=\"server\" />\n                  Sensor\n                </div>\n                <div>Tilt</div>\n                <div>\n                  {this.state.connected ? `${this.state.tilt.roll} | ${this.state.tilt.pitch}` : <Icon name=\"close\" />}\n                </div>\n              </Grid.Column>\n            </Grid.Row>\n            {/* <Grid.Row className=\"info-header\">\n              <h3>Port data</h3>\n            </Grid.Row> */}\n            <Grid.Row>\n              {Object.keys(this.state.ports).map(element => (\n                <Grid.Column className=\"info-item\" key={element}>\n                  <div className=\"info-item-header\">\n                    <Icon name=\"cog\" />\n                    {element}\n                  </div>\n                  <div>Action</div>\n                  <div>\n                    {this.state.ports[element].action ? this.state.ports[element].action : <Icon name=\"close\" />}\n                  </div>\n                  <div>Angle</div>\n                  <div>{this.state.ports[element].angle}</div>\n                </Grid.Column>\n              ))}\n            </Grid.Row>\n            <Grid.Row>\n              <Icon name=\"envelope\" />\n              {this.state.error === ''\n                ? 'No messages from communication library'\n                : `Communication library message:${this.state.error}`}\n            </Grid.Row>\n          </Grid>\n        </Accordion.Content>\n      </Accordion>\n    );\n  }\n}\n\nexport default BoostDeviceInfo;\n","import LegoBoost from 'lego-boost-browser';\nimport * as React from 'react';\nimport { Button, Grid, Container, Icon, Message } from 'semantic-ui-react';\nimport MessageBlock from './MessageBlock';\nimport { BoostConfiguration } from 'lego-boost-browser/dist/hub/hubAsync';\n\ninterface BoostMainProps {\n  boost: LegoBoost;\n  infoVisible: boolean;\n  infoToggle: () => void;\n  configuration?: BoostConfiguration;\n}\n\nclass BoostMain extends React.Component<BoostMainProps> {\n  constructor(props) {\n    super(props);\n  }\n\n  isIos = () => /(iPhone|iPad|iPod)/.test(navigator.userAgent);\n\n  isWebBluetoothSupported = () => navigator.bluetooth ? true : false;\n\n  render() {\n    if (this.isIos()) {\n      return (\n        <Container>\n          <Message\n            negative\n            icon=\"apple\"\n            header=\"Apple iOS not supported\"\n            content=\"Unfortunately Apple iOS (iPhone, iPad) doesn't support Web Bluetooth API, so Lego Boost Control can't connect to Bluetooth devices\"\n          />\n        </Container>\n      );\n    }\n\n    if (!this.isWebBluetoothSupported()) {\n      return (\n        <Container>\n          <Message\n            negative\n            icon=\"bluetooth\"\n            header=\"Device doesn't support Web Bluetooth\"\n            content=\"Your device doesn't support Web Bluetooth API. Try to turn on Experimental Platform Features from Chrome. Copy to address bar: chrome://flags/#enable-experimental-web-platform-features\"\n          />\n        </Container>\n      );\n    }\n\n    return (\n      <Container>\n        <MessageBlock\n          visible={this.props.infoVisible}\n          infoToggle={this.props.infoToggle}\n          content=\"Click Connect and pair with LEGO Move Hub. Go to Manual, AI or Code page and start controlling your Lego Boost. Note! Lego Boost might show up as a Unknown or unsupported device or as a LEGO Move Hub in the connection dialog.\"\n        />\n        <Grid>\n          <Grid.Row columns={1}>\n            <Grid.Column>\n              <Button color=\"green\" onClick={this.props.boost.connect.bind(this.props.boost, this.props.configuration)}>\n                <Icon name=\"bluetooth b\" />\n                Connect\n              </Button>\n              {/* <Button secondary onClick={this.props.boost.disconnect.bind(this.props.boost)}>Disconnect</Button> */}\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n      </Container>\n    );\n  }\n}\n\nexport default BoostMain;\n","import LegoBoost from 'lego-boost-browser';\nimport * as React from 'react';\nimport { Grid, Button, Dropdown, Icon, Accordion, Header } from 'semantic-ui-react';\n\nimport BoostControlInfo from './BoostControlInfo';\nimport { ControlMode } from '../Models';\n\ninterface ManualExtraControlProps {\n  boost: LegoBoost;\n  extraControlsVisible: boolean;\n  onExtraControlsToggle: () => void;\n  controlMode: ControlMode;\n  onUpdateControlMode: (controlModel: ControlMode) => void;\n}\n\ninterface ManualExtraControlState {\n  lastCommand: string;\n  mode: ControlMode;\n  ledColor: string;\n  activeIndex: number;\n}\n\nenum Command {\n  None = 'none',\n  Up = 'up',\n  Down = 'down',\n  Left = 'left',\n  Right = 'right',\n  Stop = 'stop',\n}\n\nconst LED_COLORS = [\n  { key: 'off', value: 'off', text: 'Off' },\n  { key: 'pink', value: 'pink', text: 'Pink' },\n  { key: 'purple', value: 'purple', text: 'Purple' },\n  { key: 'blue', value: 'blue', text: 'Blue' },\n  { key: 'lightblue', value: 'lightblue', text: 'Lightblue' },\n  { key: 'cyan', value: 'cyan', text: 'Cyan' },\n  { key: 'green', value: 'green', text: 'Green' },\n  { key: 'yellow', value: 'yellow', text: 'Yellow' },\n  { key: 'orange', value: 'orange', text: 'Orange' },\n  { key: 'red', value: 'red', text: 'Red' },\n  { key: 'white', value: 'white', text: 'White' },\n];\n\nclass ManualExtraControl extends React.Component<ManualExtraControlProps, ManualExtraControlState> {\n  constructor(props: ManualExtraControlProps) {\n    super(props);\n    this.state = {\n      lastCommand: '',\n      mode: props.controlMode || ControlMode.Click,\n      ledColor: 'off',\n      activeIndex: props.extraControlsVisible ? 0 : -1,\n    };\n  }\n\n  handleLedChange = (e, { value }) => this.setState({ ledColor: value });\n\n  render() {\n    const controlProps = { ...this.props };\n\n    return (\n      <div className=\"manual-controls\">\n        <Grid>\n          <Grid.Row columns={2} centered>\n            <Header as=\"h4\">\n              <Icon name=\"gamepad\" />\n              Select Control Mode\n            </Header>\n          </Grid.Row>\n          <Grid.Row columns={2}>\n            <Grid.Column textAlign=\"right\">\n              <Button\n                color={this.state.mode === ControlMode.Click ? 'red' : 'grey'}\n                onClick={() => this.props.onUpdateControlMode(ControlMode.Click)}\n              >\n                <Icon name=\"pointing up\" />\n                Click Mode\n              </Button>\n            </Grid.Column>\n            <Grid.Column textAlign=\"left\">\n              <Button\n                color={this.state.mode === ControlMode.Arcade ? 'red' : 'grey'}\n                onClick={() => this.props.onUpdateControlMode(ControlMode.Arcade)}\n              >\n                <Icon name=\"gamepad\" />\n                Arcade Mode\n              </Button>\n            </Grid.Column>\n          </Grid.Row>\n          <Grid.Row columns={1} centered>\n            <Header as=\"h4\">\n              <Icon name=\"lightbulb\" />\n              Set Led Color\n            </Header>\n          </Grid.Row>\n          <Grid.Row columns={2}>\n            <Grid.Column textAlign=\"right\">\n              <Dropdown options={LED_COLORS} value={this.state.ledColor} onChange={this.handleLedChange} />\n            </Grid.Column>\n            <Grid.Column textAlign=\"left\">\n              <Button primary onClick={async () => await this.props.boost.ledAsync(this.state.ledColor)}>\n                <Icon name=\"lightbulb outline\" />\n                Set Color\n              </Button>\n            </Grid.Column>\n          </Grid.Row>\n          <Grid.Row columns={1} centered>\n            <Header as=\"h4\">\n              <Icon name=\"info\" />\n              Control Information\n            </Header>\n          </Grid.Row>\n          <Grid.Row columns={1}>\n            <Grid.Column>\n              <BoostControlInfo {...controlProps} />\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n      </div>\n    );\n  }\n}\n\nexport default ManualExtraControl;\n","import LegoBoost from 'lego-boost-browser';\nimport * as React from 'react';\nimport { Grid, Button, Container } from 'semantic-ui-react';\nimport MessageBlock from './MessageBlock';\nimport { ControlData, State } from 'lego-boost-browser/dist/types';\n\ninterface AiControlProps {\n  boost: LegoBoost;\n  infoVisible: boolean;\n  infoToggle: () => void;\n  controlData: ControlData;\n}\n\nconst states = ['Drive', 'Back', 'Seek', 'Turn', 'Manual'];\n\nconst createStates = (currentState?: State) =>\n  states.map(state => (\n    <Grid.Column key={state} className={currentState === state ? 'info-item selected' : 'info-item'}>\n      <div>{state}</div>\n    </Grid.Column>\n  ));\n\nconst AiControl = (props: AiControlProps) => (\n  <Container>\n    <MessageBlock\n      visible={props.infoVisible}\n      infoToggle={props.infoToggle}\n      content=\"AI-mode controls Lego Boost automatically. When sensor notices an object, the robot will try to turn away from the object and continue driving. If it notices the object too late, the robot will back away and turn to a new direction.\"\n    />\n    <Grid centered columns=\"equal\">\n      <Grid.Row centered>\n        <Button.Group>\n          <Button positive size=\"huge\" onClick={() => props.boost.ai()}>\n            Start\n          </Button>\n          <Button.Or text=\"AI\" />\n          <Button negative size=\"huge\" onClick={() => props.boost.stop()}>\n            Stop\n          </Button>\n        </Button.Group>\n      </Grid.Row>\n    </Grid>\n    <Grid centered>\n      <Grid.Row>\n        <h3>AI State</h3>\n      </Grid.Row>\n      <Grid.Row>{createStates(props.controlData.state)}</Grid.Row>\n    </Grid>\n  </Container>\n);\n\nexport default AiControl;\n","import * as React from 'react';\nimport { Container, List, Header, Divider } from 'semantic-ui-react';\n\ninterface InfoProps {\n  version?: string;\n  date?: string;\n}\n\n// const About: React.FunctionComponent<AboutProps> = ({  version, date  }) =>\nconst Info = ({ version, date }: InfoProps) => (\n  <Container>\n    <Container textAlign=\"left\">\n      <Header as=\"h4\">General Info</Header>\n      <List bulleted>\n        <List.Item>Works only with computers (Windows, macOS, Linux) and Android 6.0 Marshmallow or later </List.Item>\n        <List.Item>Supported Browsers Chrome (from version 70 onwards) and Opera</List.Item>\n        <List.Item>\n          Works in offline mode after initial load, so airplane mode can be switched on if needed (remember to turn the\n          bluetooth back on)\n        </List.Item>\n        <List.Item>\n          Read more from: <a href=\"https://github.com/ttu/lego-boost-app\">https://github.com/ttu/lego-boost-app</a>\n        </List.Item>\n      </List>\n    </Container>\n\n    <Divider />\n\n    <Container textAlign=\"left\">\n      <Header as=\"h4\">Common Problems</Header>\n      <List bulleted>\n        <List.Item>Connect-button doesn't work: Check troubleshoot guide from below</List.Item>\n        <List.Item>\n          Lego Boost's distance sensor doesn't work: Remove the sensor from the Lego Boost and attach it again\n        </List.Item>\n        <List.Item>Manual control won't work: Refresh the page and reconnect</List.Item>\n        <List.Item>In case of any unknown problem: Refresh the page and reconnect</List.Item>\n        <List.Item>Controls don't work or connection is lost: Check Lego Boost's battery charge</List.Item>\n        <List.Item>\n          Page shows no connection, but Boost's led shows it is connected: Press power button ~10sec to reset Boost's\n          connection\n        </List.Item>\n        <List.Item>Boost's firmware is older than 2.0.00.0017</List.Item>\n      </List>\n    </Container>\n\n    <Divider />\n\n    <Container textAlign=\"left\">\n      <Header as=\"h4\">Web Bluetooth troubleshoot</Header>\n\n      <p>If Connect-button doesn't work, check this troubleshoot guide</p>\n\n      <Header as=\"h5\">Try with Google’s tester</Header>\n\n      <List bulleted>\n        <List.Item>\n          Go to{' '}\n          <a href=\"https://googlechrome.github.io/samples/web-bluetooth/device-info.html?allDevices=true\">\n            Web Bluetooth / Device Info Sample\n          </a>\n        </List.Item>\n        <List.Item>Select All Devices</List.Item>\n        <List.Item>Click Get Bluetooth Device Info button</List.Item>\n        <List.Item>Pairing device chooser window should appear</List.Item>\n      </List>\n\n      <p>\n        Pairing device chooser window looks like this{' '}\n        <a href=\"https://developers.google.com/web/updates/images/2015-07-22-interact-with-ble-devices-on-the-web/bluetooth-device-chooser.webm\">\n          bluetooth-device-chooser.webm\n        </a>\n      </p>\n\n      <Header as=\"h5\">If Goolge's tester works: Check that legoboost-site uses https</Header>\n\n      <p>Web Bluetooth API can only be used with a secured connection (HTTP over SSL)</p>\n      <List bulleted>\n        <List.Item>Won't work: http://legoboost.azurewebsites.net</List.Item>\n        <List.Item>Will work: https://legoboost.azurewebsites.net</List.Item>\n      </List>\n\n      <p>NOTE: legoboost.azurewebsites.net should automatically redirect to https</p>\n\n      <Header as=\"h5\">If Google's tester didn't work: Check that Chrome's version is 70 or newer</Header>\n\n      <pre>\n        <code>Chrome -&gt; Open menu (three small dots) -&gt; Help -&gt; About Google Chrome</code>\n      </pre>\n\n      <Header as=\"h5\">If Chrome has supported version: Check that Operating System is supported</Header>\n\n      <p>Check that OS version is on supported list:</p>\n      <a href=\"https://github.com/WebBluetoothCG/web-bluetooth/blob/master/implementation-status.md#notes\">\n        https://github.com/WebBluetoothCG/web-bluetooth/blob/master/implementation-status.md#notes\n      </a>\n    </Container>\n\n    <Divider />\n\n    <Header as=\"h3\">Version info</Header>\n\n    <Container textAlign=\"left\">\n      <Container>Version: {version}</Container>\n      <Container>Build date: {date}</Container>\n    </Container>\n\n    <Divider />\n\n    <Header as=\"h3\">Changelog</Header>\n\n    <Container textAlign=\"left\">\n      Check changes from GitHub:{' '}\n      <a href=\"https://github.com/ttu/lego-boost-app/blob/master/CHANGELOG.md\">CHANGELOG.md</a>\n    </Container>\n\n    <Container textAlign=\"left\">\n      <Divider />\n\n      <Container>\n        Development version with possible unreleased features and fixes:{' '}\n        <a href=\"https://legoboostdev.azurewebsites.net\">https://legoboostdev.azurewebsites.net</a>\n      </Container>\n      <Container>This version may not work all the time as it is the active development version.</Container>\n\n      <Divider />\n    </Container>\n  </Container>\n);\n\nexport default Info;\n","import LegoBoost from 'lego-boost-browser';\nimport * as React from 'react';\nimport { Grid, Button, Container, Segment, Header, Icon } from 'semantic-ui-react';\nimport { Slider } from 'react-semantic-ui-range';\nimport MessageBlock from './MessageBlock';\n\ninterface MotorControlProps {\n  boost: LegoBoost;\n  infoVisible: boolean;\n  infoToggle: () => void;\n}\n\ninterface MotorControlState {\n  A: number;\n  B: number;\n  AB: number;\n  C: number;\n  D: number;\n}\n\nclass MotorControl extends React.Component<MotorControlProps, MotorControlState> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      A: 0,\n      B: 0,\n      AB: 0,\n      C: 0,\n      D: 0,\n    };\n  }\n\n  componentWillUnmount = () => {\n    this.stopMotors();\n    // TODO: How to reset Sliders?\n    this.setState({\n      A: 0,\n      B: 0,\n      AB: 0,\n      C: 0,\n      D: 0,\n    });\n  };\n\n  stopMotors = () => {\n    for (const port of ['A', 'B', 'AB', 'C', 'D']) {\n      this.props.boost.motorAngle(port, 0, 0);\n    }\n  };\n\n  render() {\n    const createColumn = port => {\n      return (\n        <Grid.Column width={16}>\n          <Segment>\n            <Header as=\"h1\">\n              {port} : {this.state[port]}\n            </Header>\n            <Slider\n              color=\"red\"\n              inverted={false}\n              settings={{\n                start: this.state[port],\n                min: -100,\n                max: 100,\n                step: 1,\n                onChange: value => {\n                  // @ts-ignore\n                  this.setState({ [port]: value });\n                  this.props.boost.motorAngle(port, 3600, value);\n                  // this.props.boost.motorTime(port, 3600, value);\n                },\n              }}\n            />\n          </Segment>\n        </Grid.Column>\n      );\n    };\n\n    this.stopMotors();\n\n    return (\n      <Container>\n        <MessageBlock\n          visible={this.props.infoVisible}\n          infoToggle={this.props.infoToggle}\n          content=\"Control individial motors. Motors will stop automatically when user exits the view.\"\n        />\n        <Grid padded>\n          <Grid.Column width={16}>\n            <Button color=\"red\" onClick={this.stopMotors}>\n              <Icon name=\"stop circle\" />\n              Stop\n            </Button>\n          </Grid.Column>\n          {/* {Object.keys(this.state).map(port => createColumn(port))} */}\n          {createColumn('A')}\n          {createColumn('B')}\n          {createColumn('AB')}\n          {createColumn('C')}\n          {createColumn('D')}\n        </Grid>\n      </Container>\n    );\n  }\n}\n\nexport default MotorControl;\n","import LegoBoost from 'lego-boost-browser';\nimport * as React from 'react';\nimport { Grid, Button, Container, Dropdown, Icon } from 'semantic-ui-react';\nimport MessageBlock from './MessageBlock';\nimport { BoostConfig } from '../Models';\n\ninterface BoostConfigurationProps {\n  boost: LegoBoost;\n  infoVisible: boolean;\n  infoToggle: () => void;\n  configuration: BoostConfig;\n  updataConfig: (c: BoostConfig) => void;\n  resetConfig: () => void;\n}\n\nclass BoostConfiguration extends React.Component<BoostConfigurationProps> {\n  stateOptions = [\n    { key: 'A', value: 'A', text: 'A' },\n    { key: 'B', value: 'B', text: 'B' },\n    // { key: 'C', value: 'C', text: 'C' },\n    // { key: 'D', value: 'D', text: 'D' }\n  ];\n\n  constructor(props) {\n    super(props);\n  }\n\n  setCarMode = () => {\n    this.props.updataConfig({ leftMotor: 'B', rightMotor: 'A' });\n  };\n\n  setVernieMode = () => {\n    this.props.updataConfig({ leftMotor: 'A', rightMotor: 'B' });\n  };\n\n  setDriveFineTune = value => {\n    const original = this.props.configuration.driveFinetune || 1.0;\n    this.props.updataConfig({ driveFinetune: original + value });\n  };\n\n  setTurnFineTune = value => {\n    const original = this.props.configuration.turnFinetune || 1.0;\n    this.props.updataConfig({ turnFinetune: original + value });\n  };\n\n  setMotor = (ev, { name, value }) => {\n    const other = name === 'leftMotor' ? 'rightMotor' : 'leftMotor';\n    let otherValue = this.props.configuration[other];\n\n    if (value === otherValue) {\n      otherValue = value === 'A' ? 'B' : 'A';\n    }\n\n    this.props.updataConfig({ [name]: value, [other]: otherValue });\n  };\n\n  render() {\n    return (\n      <Container>\n        <MessageBlock\n          visible={this.props.infoVisible}\n          infoToggle={this.props.infoToggle}\n          content=\"Configuration is saved to browser's storage.\"\n        />\n        <Grid centered columns=\"equal\">\n          <Grid.Row>Motor modes</Grid.Row>\n          <Grid.Row centered>\n            <Grid.Column textAlign=\"right\">\n              <Button secondary onClick={this.setVernieMode}>\n                Vernie\n              </Button>\n            </Grid.Column>\n            <Grid.Column textAlign=\"center\">\n              <Button secondary onClick={this.setCarMode}>\n                Car (A/B back)\n              </Button>\n            </Grid.Column>\n            <Grid.Column textAlign=\"left\">\n              <Button secondary onClick={this.setVernieMode}>\n                Car (A/B front)\n              </Button>\n            </Grid.Column>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Column textAlign=\"right\">\n              Left:{' '}\n              <Dropdown\n                search\n                selection\n                options={this.stateOptions}\n                name=\"leftMotor\"\n                value={this.props.configuration.leftMotor}\n                onChange={this.setMotor}\n              />\n            </Grid.Column>\n            <Grid.Column textAlign=\"left\">\n              Right:{' '}\n              <Dropdown\n                search\n                selection\n                options={this.stateOptions}\n                name=\"rightMotor\"\n                value={this.props.configuration.rightMotor}\n                onChange={this.setMotor}\n              />\n            </Grid.Column>\n          </Grid.Row>\n          <Grid.Row>Finetunes</Grid.Row>\n          <Grid.Row centered>\n            <Grid.Column textAlign=\"right\">\n              <Grid.Row textAlign=\"center\">Drive: {this.props.configuration.driveFinetune}</Grid.Row>\n              <Grid.Row>\n                <Button icon=\"left chevron\" onClick={() => this.setDriveFineTune(-0.01)} />\n                <Button icon=\"right chevron\" onClick={() => this.setDriveFineTune(0.01)} />\n              </Grid.Row>\n            </Grid.Column>\n            <Grid.Column textAlign=\"left\">\n              <Grid.Row textAlign=\"center\">Turn: {this.props.configuration.turnFinetune}</Grid.Row>\n              <Grid.Row>\n                <Button icon=\"left chevron\" onClick={() => this.setTurnFineTune(-0.01)} />\n                <Button icon=\"right chevron\" onClick={() => this.setTurnFineTune(0.01)} />\n              </Grid.Row>\n            </Grid.Column>\n          </Grid.Row>\n          <Grid.Row centered>\n            <Grid.Column textAlign=\"center\">\n              <Button color=\"red\" onClick={this.props.resetConfig}>\n                <Icon name=\"sync\" />\n                Reset config\n              </Button>\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n      </Container>\n    );\n  }\n}\n\nexport default BoostConfiguration;\n","import * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Menu, Sidebar, Segment, Icon } from 'semantic-ui-react';\n\ninterface SideBarMenuProps {\n  connected: boolean;\n  connect: () => void;\n}\n\ninterface SideBarMenuState {\n  visible: boolean;\n}\n\nclass SideBarMenu extends React.Component<SideBarMenuProps, SideBarMenuState> {\n  constructor(props) {\n    super(props);\n    this.state = { visible: false };\n  }\n\n  handleShowClick = () => this.setState(prevState => ({ visible: !prevState.visible }));\n  handleSidebarHide = () => this.setState({ visible: false });\n\n  getConnectedItem = () =>\n    this.props.connected ? (\n      <div className=\"connect-item\" onClick={_ => this.props.connect()}>\n        <Icon name=\"circle\" color=\"green\" />\n        Connected\n      </div>\n    ) : (\n      <div className=\"connect-item\" onClick={_ => this.props.connect()}>\n        <Icon name=\"circle\" color=\"red\" />\n        Not connected\n      </div>\n    );\n\n  render() {\n    const { visible } = this.state;\n\n    return (\n      <Sidebar.Pushable as={Segment} className=\"all-content\">\n        <Sidebar\n          as={Menu}\n          animation=\"overlay\"\n          icon=\"labeled\"\n          inverted\n          onHide={this.handleSidebarHide}\n          vertical\n          visible={visible}\n          width=\"wide\"\n        >\n          <Menu.Item active={window.location.pathname === '/'} as={Link} to=\"/\" onClick={this.handleSidebarHide}>\n            <Icon name=\"home\" />\n            Main\n          </Menu.Item>\n          <Menu.Item active={window.location.pathname === '/code'} as={Link} to=\"/code\" onClick={this.handleSidebarHide}>\n            <Icon name=\"file code outline\" />\n            Code Editor\n          </Menu.Item>\n          <Menu.Item active={window.location.pathname === '/ai'} as={Link} to=\"/ai\" onClick={this.handleSidebarHide}>\n            <Icon name=\"wechat\" />\n            AI Mode\n          </Menu.Item>\n          <Menu.Item active={window.location.pathname === '/manual'} as={Link} to=\"/manual\" onClick={this.handleSidebarHide}>\n            <Icon name=\"gamepad\" />\n            Manual Control\n          </Menu.Item>\n          <Menu.Item active={window.location.pathname === '/manualextra'} as={Link} to=\"/manualextra\" onClick={this.handleSidebarHide}>\n            <Icon name=\"lightbulb outline\" />\n            Manual Extra Control\n          </Menu.Item>\n          <Menu.Item active={window.location.pathname === '/motors'} as={Link} to=\"/motors\" onClick={this.handleSidebarHide}>\n            <Icon name=\"server\" />\n            Individual Motors\n          </Menu.Item>\n          <Menu.Item active={window.location.pathname === '/config'} as={Link} to=\"/config\" onClick={this.handleSidebarHide}>\n            <Icon name=\"dashboard\" />\n            Configure\n          </Menu.Item>\n          <Menu.Item active={window.location.pathname === '/info'} as={Link} to=\"/info\" onClick={this.handleSidebarHide}>\n            <Icon name=\"info circle\" />\n            Info\n          </Menu.Item>\n        </Sidebar>\n        <Menu fixed=\"top\" inverted>\n          <Menu.Item onClick={this.handleShowClick}>\n            <Icon name=\"sidebar\" />\n            Menu\n          </Menu.Item>\n          <Menu.Item>{this.getConnectedItem()}</Menu.Item>\n          <Menu.Item position=\"right\">Lego Boost Control</Menu.Item>\n        </Menu>\n        <Sidebar.Pusher className=\"main-content\">\n          <Segment>{this.props.children}</Segment>\n        </Sidebar.Pusher>\n      </Sidebar.Pushable>\n    );\n  }\n}\n\nexport default SideBarMenu;\n","import * as React from 'react';\nimport { Table } from 'semantic-ui-react';\nimport { ControlData } from '../Models';\nimport LegoBoost from 'lego-boost-browser';\n\ninterface BoostControlInfoProps {\n  boost: LegoBoost;\n}\n\nclass BoostControlInfo extends React.Component<BoostControlInfoProps, ControlData> {\n  boost: LegoBoost;\n  stateUpdaterId: NodeJS.Timeout;\n  stateUpdateInterval = 500;\n\n  constructor(props) {\n    super(props);\n    this.boost = this.props.boost;\n    this.state = { ...this.boost.controlData };\n  }\n\n  componentDidMount = () => {\n    this.stateUpdaterId = setInterval(() => {\n      this.setState({\n        state: this.boost.controlData.state,\n        input: this.boost.controlData.input,\n        speed: this.boost.controlData.speed,\n        turnAngle: this.boost.controlData.turnAngle,\n        updateInputMode: this.boost.controlData.updateInputMode,\n      });\n    }, this.stateUpdateInterval);\n  };\n\n  componentWillUnmount() {\n    clearInterval(this.stateUpdaterId);\n  }\n\n  shouldComponentUpdate = (nextProps, nextState) => {\n    return true;\n  };\n\n  render() {\n    return (\n      <Table definition>\n        <Table.Body>\n          <Table.Row>\n            <Table.Cell>Speed</Table.Cell>\n            <Table.Cell>{this.state.speed}</Table.Cell>\n          </Table.Row>\n          <Table.Row>\n            <Table.Cell>Turn Angle</Table.Cell>\n            <Table.Cell>{this.state.turnAngle}</Table.Cell>\n          </Table.Row>\n          <Table.Row>\n            <Table.Cell>Input mode</Table.Cell>\n            <Table.Cell>{this.state.input}</Table.Cell>\n          </Table.Row>\n        </Table.Body>\n      </Table>\n    );\n  }\n}\n\nexport default BoostControlInfo;\n","import './App.css';\n\nimport LegoBoost from 'lego-boost-browser';\nimport { DEFAULT_CONFIG } from 'lego-boost-browser/dist/hub/hubAsync';\nimport * as React from 'react';\nimport { BrowserRouter, Route, Redirect, Switch } from 'react-router-dom';\nimport { Grid } from 'semantic-ui-react';\nimport localStorage from 'local-storage';\nimport preval from 'preval.macro';\n\nimport BoostDeviceInfo from './components/BoostDeviceInfo';\nimport BoostMain from './components/BoostMain';\nimport ManualControl from './components/ManualControl';\nimport AiControl from './components/AiControl';\nimport CodeControl from './components/CodeControl';\nimport Info from './components/Info';\nimport MotorControl from './components/MotorControl';\nimport BoostConfiguration from './components/BoostConfiguration';\nimport { BoostConfig, ControlMode, StoredApplicationState } from './Models';\nimport SideBarMenu from './SideBarMenu';\nimport ManualExtraControl from './components/ManualExtraControl';\nimport { ControlData } from 'lego-boost-browser/dist/types';\n\nconst APP_BUILD_TIME = preval`module.exports = new Date().toLocaleString('en-US', { year: 'numeric', month: 'long', day: 'numeric' });`;\nconst APP_VERSION = process.env.REACT_APP_VERSION || 'not defined';\nconst CONFIG_STORAGE_KEY = 'boost-configuration';\nconst LOCAL_STATE_STORAGE_KEY = 'local-state';\n\nconst DEFAULT_BOOST_CONFIG: BoostConfig = {\n  driveFinetune: 1.0,\n  turnFinetune: 1.0,\n  leftMotor: 'A',\n  rightMotor: 'B',\n};\n\nconst DEFAULT_STATE: StoredApplicationState = {\n  infosVisible: true,\n  boostInfosVisible: true,\n  extraControlsVisible: false,\n  code: '',\n  controlMode: ControlMode.Click,\n};\n\ninterface ApplicationState {\n  infosVisible: boolean;\n  extraControlsVisible: boolean;\n  boostInfosVisible: boolean;\n  code: string;\n  configuration: BoostConfig;\n  isConnected: boolean;\n  controlMode: ControlMode;\n  controlData: ControlData;\n}\n\nclass App extends React.Component<{}, ApplicationState> {\n  boost: LegoBoost = new LegoBoost();\n  stateUpdaterId: NodeJS.Timeout;\n  stateUpdateInterval = 500;\n\n  constructor(props) {\n    super(props);\n    const savedState = localStorage.get(LOCAL_STATE_STORAGE_KEY) as StoredApplicationState;\n    this.state = {\n      infosVisible:\n        savedState && this.isBoolean(savedState.infosVisible) ? savedState.infosVisible : DEFAULT_STATE.infosVisible,\n      boostInfosVisible:\n        savedState && this.isBoolean(savedState.boostInfosVisible)\n          ? savedState.boostInfosVisible\n          : DEFAULT_STATE.boostInfosVisible,\n      extraControlsVisible:\n        savedState && this.isBoolean(savedState.extraControlsVisible)\n          ? savedState.extraControlsVisible\n          : DEFAULT_STATE.extraControlsVisible,\n      code: savedState ? savedState.code : DEFAULT_STATE.code,\n      controlMode: (savedState && savedState.controlMode) || DEFAULT_STATE.controlMode,\n      configuration: (localStorage.get(CONFIG_STORAGE_KEY) as BoostConfig) || DEFAULT_BOOST_CONFIG,\n      isConnected: false,\n      controlData: this.boost.controlData,\n    };\n\n    // logDebug is a private, so must ignore ts errors\n    // @ts-ignore\n    // tslint:disable-next-line: no-console\n    this.boost.logDebug = console.log;\n  }\n\n  isBoolean = (value: any) => typeof value === 'boolean';\n\n  onInfoToggle = () => this.updateToStorageAndState('infosVisible', !this.state.infosVisible);\n\n  onBoostInfoToggle = () => this.updateToStorageAndState('boostInfosVisible', !this.state.boostInfosVisible);\n\n  onExtraControlsToggle = () => this.updateToStorageAndState('extraControlsVisible', !this.state.extraControlsVisible);\n\n  updateCode = (code: string) => this.updateToStorageAndState('code', code);\n\n  onUpdateControlMode = (controlMode: ControlMode) => this.updateToStorageAndState('controlMode', controlMode);\n\n  updateToStorageAndState = (propName: string, value: any) => {\n    const newLocalState = { ...this.state, [propName]: value };\n    localStorage.set(LOCAL_STATE_STORAGE_KEY, newLocalState);\n    // @ts-ignore\n    this.setState({ [propName]: value });\n  };\n\n  updateConfig = (c: BoostConfig) => {\n    this.setState(prevState => {\n      const prevConfig = prevState.configuration;\n      const newConfig = {\n        distanceModifier: prevConfig.driveFinetune\n          ? DEFAULT_CONFIG.METRIC_MODIFIER * prevConfig.driveFinetune\n          : DEFAULT_CONFIG.METRIC_MODIFIER,\n        turnModifier: prevConfig.turnFinetune\n          ? DEFAULT_CONFIG.TURN_MODIFIER * prevConfig.turnFinetune\n          : DEFAULT_CONFIG.TURN_MODIFIER,\n        ...prevConfig,\n        ...c,\n      };\n      localStorage.set(CONFIG_STORAGE_KEY, newConfig);\n      this.boost.updateConfiguration(newConfig);\n      return { configuration: newConfig };\n    });\n  };\n\n  updateIsConnected = (isConnected: boolean) => this.setState({ isConnected });\n\n  connect = () => (!this.state.isConnected ? this.boost.connect(this.state.configuration) : {});\n\n  resetConfig = () => {\n    localStorage.set(CONFIG_STORAGE_KEY, DEFAULT_BOOST_CONFIG);\n    this.boost.updateConfiguration(DEFAULT_BOOST_CONFIG);\n    this.setState({ configuration: DEFAULT_BOOST_CONFIG });\n  };\n\n  componentDidMount = () => {\n    // TODO: Move controlData and deviceInfo update from components to here\n    this.stateUpdaterId = setInterval(() => {\n      this.setState({\n        controlData: this.boost.controlData,\n      });\n    }, this.stateUpdateInterval);\n  };\n\n  componentWillUnmount() {\n    clearInterval(this.stateUpdaterId);\n  }\n\n  public render() {\n    const boostProps = { boost: this.boost };\n\n    const CreateBoostMain = () => (\n      <BoostMain\n        {...boostProps}\n        infoVisible={this.state.infosVisible}\n        infoToggle={this.onInfoToggle}\n        configuration={this.state.configuration}\n      />\n    );\n    const CreateManualControl = () => <ManualControl {...boostProps} controlMode={this.state.controlMode} />;\n    const CreateManualExtraControl = () => (\n      <ManualExtraControl\n        {...boostProps}\n        controlMode={this.state.controlMode}\n        onUpdateControlMode={this.onUpdateControlMode}\n        extraControlsVisible={this.state.extraControlsVisible}\n        onExtraControlsToggle={this.onExtraControlsToggle}\n      />\n    );\n    const CreateAiControl = () => (\n      <AiControl\n        {...boostProps}\n        controlData={this.state.controlData}\n        infoVisible={this.state.infosVisible}\n        infoToggle={this.onInfoToggle}\n      />\n    );\n    const CreateConfigurationControl = () => (\n      <BoostConfiguration\n        {...boostProps}\n        infoVisible={this.state.infosVisible}\n        infoToggle={this.onInfoToggle}\n        updataConfig={this.updateConfig}\n        resetConfig={this.resetConfig}\n        configuration={this.state.configuration}\n      />\n    );\n    const CreateMotorControl = () => (\n      <MotorControl {...boostProps} infoVisible={this.state.infosVisible} infoToggle={this.onInfoToggle} />\n    );\n    const CreateCodeControl = () => (\n      <CodeControl\n        {...boostProps}\n        code={this.state.code}\n        updateCode={this.updateCode}\n        infoVisible={this.state.infosVisible}\n        infoToggle={this.onInfoToggle}\n      />\n    );\n    const CreateInfoComponent = () => <Info version={APP_VERSION} date={APP_BUILD_TIME} />;\n\n    return (\n      <BrowserRouter>\n        <SideBarMenu connected={this.state.isConnected} connect={this.connect}>\n          <Grid centered>\n            <Grid.Row className=\"\">\n              <Switch>\n                <Route exact path=\"/\" render={CreateBoostMain} />\n                <Route path=\"/manual\" render={CreateManualControl} />\n                <Route path=\"/manualextra\" render={CreateManualExtraControl} />\n                <Route path=\"/motors\" render={CreateMotorControl} />\n                <Route path=\"/ai\" render={CreateAiControl} />\n                <Route path=\"/code\" render={CreateCodeControl} />\n                <Route path=\"/config\" render={CreateConfigurationControl} />\n                <Route path=\"/info\" render={CreateInfoComponent} />\n                <Route render={() => <Redirect to=\"/\" />} />\n              </Switch>\n            </Grid.Row>\n            <Grid.Row className=\"main-row\">\n              <BoostDeviceInfo\n                {...boostProps}\n                connectedChanged={this.updateIsConnected}\n                boostInfosVisible={this.state.boostInfosVisible}\n                toggleVisibility={this.onBoostInfoToggle}\n              />\n            </Grid.Row>\n          </Grid>\n        </SideBarMenu>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n"],"sourceRoot":""}